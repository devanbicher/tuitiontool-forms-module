<?php

  /* MAKE SURE NONE OF MY FUNCTIONS CONFLICT WITH MY OTHER MODULE. */

function tuition_tool_forms_menu(){
  $menu_items = array();

  $menu_items['admin/content/tuition_tool_forms'] = array(
       'title' => 'Tuition Tool Forms',
       'description' => 'Landing Page for the Forms',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_landing'),
       'access arguments' => array('access default landing'),
							  );

  $menu_items['admin/content/tuition_tool_forms/american_forms'] = array(
       'title' => 'American Studies Forms',
       'description' => 'Generate the American Studies TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access american defaults'),
							  );
  $menu_items['admin/content/tuition_tool_forms/biology_forms'] = array(
       'title' => 'Biology Forms',
       'description' => 'Generate the Biology TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access bio defaults'),
							  );
    $menu_items['admin/content/tuition_tool_forms/chemistry_forms'] = array(
       'title' => 'Chemistry Forms',
       'description' => 'Generate the Chemistry TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access chem defaults'),
							  );
    //DO I NEED A FORM FOR THE 'COLLEGE' AID TYPE?
    $menu_items['admin/content/tuition_tool_forms/ees_forms'] = array(
       'title' => 'EES Forms',
       'description' => 'Generate the EES TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access ees defaults'),
							  );
  $menu_items['admin/content/tuition_tool_forms/epd_forms'] = array(
       'title' => 'EPD Forms',
       'description' => 'Generate the EPD TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access epd defaults'),
							  );
    $menu_items['admin/content/tuition_tool_forms/english_forms'] = array(
       'title' => 'English Forms',
       'description' => 'Generate the English TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access english defaults'),
							  );
  $menu_items['admin/content/tuition_tool_forms/history_forms'] = array(
       'title' => 'History Forms',
       'description' => 'Generate the History TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access history defaults'),
							  );
  $menu_items['admin/content/tuition_tool_forms/math_forms'] = array(
       'title' => 'Math Forms',
       'description' => 'Generate the Math TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access math defaults'),
							  );
  //DO I NEED THE MISCELLANEOUS AID TYPE?
    $menu_items['admin/content/tuition_tool_forms/physics_forms'] = array(
       'title' => 'Physics Forms',
       'description' => 'Generate the Physics TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access physics defaults'),
							  );
    $menu_items['admin/content/tuition_tool_forms/polisci_forms'] = array(
       'title' => 'Political Science Forms',
       'description' => 'Generate the Political Science TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access polisci defaults'),
							  );
  $menu_items['admin/content/tuition_tool_forms/psychology_forms'] = array(
       'title' => 'Psychology Forms',
       'description' => 'Generate the Psychology TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access psych defaults'),
							  );
  $menu_items['admin/content/tuition_tool_forms/socanthro_forms'] = array(
       'title' => 'SocAnthro Forms',
       'description' => 'Generate the Sociology/Anthropology TA/GA Appointment Form',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('tuition_tool_forms_generating_form'),
       'access arguments' => array('access socanth defaults'),
							  );
  return $menu_items;
  }


function get_years_for_forms(){
  //This function just generates all of the available academic years
  $years = array();
  
  $ent_query = new EntityFieldQuery();
  //new entity query to get the years
  $ent_query->entityCondition('entity_type','taxonomy_term')
    ->entityCondition('bundle','academic_year');

  $match_ents = $ent_query->execute(); //execute the query
  
  foreach($match_ents['taxonomy_term'] as $myent){
    $match_ids[] = $myent->tid; //make a list of matching term ids
  }
  $load_years = entity_load('taxonomy_term',$match_ids); //load the objects into an array
  
  foreach($load_years as $curyear){
    $years[$curyear->tid] = $curyear->name; //make an array with a list of year name and taxonomy term id
  }

  arsort($years);
  return $years;
}

function get_terms_for_forms($year){
  //need to use a query function to get terms for the current year.

  $terms = array();

  $ent_query = new EntityFieldQuery;

  $ent_query->entityCondition('entity_type','taxonomy_term')
    ->entityCondition('bundle','termcodes')
    ->fieldCondition('field_academic_year','tid',$year,'=');
  
  $match_ents = $ent_query->execute();

  foreach($match_ents['taxonomy_term'] as $myent){
    $match_ids[] = $myent->tid;
  }
  $load_terms = entity_load('taxonomy_term',$match_ids);

  uasort($load_terms,'sort_terms_by_code');  //This function is in the tuition tool module
  foreach($load_terms as $curterm){
    $terms[$curterm->tid] = $curterm->name;
  }

  return $terms;
}

function get_dept_ents_from_url($form_url){
  //only used in get_students

  $dept_forms_array = explode('/',$form_url);
  $dept = explode('_forms',$dept_forms_array[4]);

  switch ($dept[0]){
  case 'american':
    return array('american_aid_entry','american_aid_type');
    break;
  case 'biology':
    return array('bio_aid_entry','bio_aid_type');
    break;
  case 'chemistry':
    return array('chem_aid_entry','chem_aid_type');
    break;
  case 'ees':
    return array('ees_aid_entry','ees_aid_type');
    break;
  case 'english':
    return array('english_aid_entry','english_aid_type');
    break;
  case 'epd':
    return array('epd_aid_entry','epd_aid_type');
    break;
  case 'history':
    return array('history_aid_entry','history_aid_type');
    break;
  case 'math':
    return array('math_aid_entry','math_aid_type');
    break;
  case 'physics':
    return array('physics_aid_entry','physics_aid_type');
    break;
  case 'polisci':
    return array('polisci_aid_entry','polisci_aid_type');
    break;
  case 'psychology':
    return array('psych_aid_entry','psych_aid_type');
    break;
  case 'socanthro':
    return array('socanth_aid_entry','socanth_aid_type');
    break;
  default:
    return array('misc_aid_entry','misc_aid_type');
  }
}

function get_dept_title_from_url($form_url){
  $dept_forms_array = explode('/',$form_url);
  $dept = explode('_forms',$dept_forms_array[4]);

  switch ($dept[0]){
  case 'american':
    return 'American Studies';
    break;
  case 'biology':
    return 'Biological Sciences';
    break;
  case 'chemistry':
    return 'Chemistry';
    break;
  case 'ees':
    return 'Earth and Environmental Sciences';
    break;
  case 'english':
    return 'English';
    break;
  case 'epd':
    return 'Environmental Policy';
    break;
  case 'history':
    return 'History';
    break;
  case 'math':
    return 'Mathematics';
    break;
  case 'physics':
    return 'Physics';
    break;
  case 'polisci':
    return 'Political Science';
    break;
  case 'psychology':
    return 'Psychology';
    break;
  case 'socanthro':
    return 'Sociology';
    break;
  default:
    return array('misc_aid_entry','misc_aid_type');
  }
}

function get_students($term,$form_url,$aid_nid,$stipendtuition){
  $dept_ents = get_dept_ents_from_url($form_url);
  $entry=$dept_ents[0];
  $aid=$dept_ents[1];

  $students = array();

  //NOW DO A FIELD QUERY ON THE AID ENTRY AND RETURN A LIST OF RELEVANT VALUES INDEXED BY THE NID
  $entry_query = new EntityFieldQuery;
  $entry_query-> entityCondition('entity_type','node')
    ->entityCondition('bundle',$entry)
    ->propertyCondition('status',NODE_PUBLISHED)
    ->fieldCondition('field_term','tid',$term,'=')
    ->fieldCondition('field_aid_type','target_id',$aid_nid,'=');
  
  if($stipendtuition == 1){
    $entry_query->fieldCondition('field_tuition','value',0,'>');
  }
  else{
    //STIPEND IS THIS REQUIRED? IT FILTERS OUT STIPEND < 0
    $entry_query->fieldCondition('field_stipend','value',0,'>');
  }

  
  $match_entries = $entry_query->execute();

  $load_entries = entity_load('node',array_keys($match_entries['node']));
  
  foreach($load_entries as $curentry){
    $effort = !empty($curentry->field_effort['und'][0]['value']) ? $curentry->field_effort['und'][0]['value'] : 0;
    $periods = !empty($curentry->field_pay_periods['und'][0]['value']) ? $curentry->field_pay_periods['und'][0]['value'] : 0;
    $tuition = !empty($curentry->field_tuition['und'][0]['value']) ? '$'.number_format($curentry->field_tuition['und'][0]['value'],2,'.',',') : 0;
    $stipend = !empty($curentry->field_stipend['und'][0]['value']) ? '$'.number_format($curentry->field_stipend['und'][0]['value'],2,'.',',') : 0;

    $start = !empty($curentry->field_aid_date['und'][0]['value']) ? $curentry->field_aid_date['und'][0]['value'] : 0;
    $end = !empty($curentry->field_aid_date['und'][0]['value2']) ? $curentry->field_aid_date['und'][0]['value2'] : 0;
    $start_date = new DateTime($start);
    $end_date = new DateTIme($end);
    
    $students[$curentry->nid] = array(
      'last' => $curentry->field_student_last_name['und'][0]['value'],
      'first' => $curentry->field_student_first_name['und'][0]['value'],
      'account' => $curentry->field_account_number['und'][0]['value'],
      //below here the values aren't required, for now.      
      'stipend' => $stipend,
      'effort' => $effort,
      'periods' => $periods, 
      'tuition' => $tuition,
      'start' => $start_date->format('m-d-Y'),
      'end' => $end_date->format('m-d-Y'),
				      );
  }

  return $students;
}

function get_aid_types_for_form($year, $form_url){
  $dept_ents = get_dept_ents_from_url($form_url);
  $aid_bundle = $dept_ents[1];

  $aid_list = array();

  $aid_query = new EntityFieldQuery;
  $aid_query-> entityCondition('entity_type','node')
    ->entityCondition('bundle',$aid_bundle)
    ->propertyCondition('status',NODE_PUBLISHED)
    ->fieldCondition('field_term_year','tid',$year,'=');

  $match_aid_query = $aid_query->execute();
  
  $loadedents= entity_load('node',array_keys($match_aid_query['node']));
  
  foreach($loadedents as $curaid){
    $aid_list[$curaid->nid] = $curaid->title;
  }
    
  return $aid_list;
}


function tuition_tool_forms_landing($form, &$form_state){
  $form['landing_markup'] = array(
				  '#markup'=>'<h1>This is simply a landing page for the other form generating pages to branch out from.  This page is purposefully blank</h1>');

  return system_settings_form($form);
}


function tuition_tool_forms_generating_form($form, &$form_state){
  $default_year = variable_get('default_year');

  $formyears = get_years_for_forms(); //This will stay, some of the other variables will change.

  $blank_header = array('meh'=>'PLEASE SELECT A TERM AND AID TYPE TO GENERATE A LIST OF STUDENTS FROM WHICH YOU CAN GENERATE YOUR FORM');
  $blank_table = array();

  $header = array(
		  'last' => 'Last Name',
		  'first' => 'First Name',
		  'account' => 'Account',
		  'effort' => 'Effort',
		  'periods' => 'Pay Periods',
		  'stipend' => 'Stipend',
		  'tuition' => 'Tuition',
		  'start' => 'Start Date',
		  'end' => 'End Date',
		  );

  $form['set_ta_ga_actions'] = array(
	  '#type' => 'actions',
	  '#weight' => -10,
					  );
  
  $form['set_ta_ga_actions']['set_form_year'] = array(
	'#type' => 'select',						
	'#title' => t('FIRST: Please select the year from which to generate this form'),
	'#options' => $formyears,
	'#required' => TRUE,
	'#default_value' => variable_get('default_year'), //THIS IS one reason WHY TUITION TOOL MODULE IS REQUIRED.
	'#ajax' => array(
			 'callback' => 'alter_term_choices',
			 'wrapper' => 'term-choices-list',
			 'method' => 'replace',
			 'effect' => 'fade'),	
						      );
  
  $form['term_select_field_set'] = array(
	 '#type' => 'fieldset',
	 '#prefix' => '<div id="term-choices-list">',
	 '#suffix' => '</div>',
	 '#weight' => -9,
					 );

  $form['term_select_field_set']['select_term'] = array(
	'#type' => 'select',
	'#weight' => -5,
	'#title' => t('SECOND: Please select Term from which to generate forms'),
	'#required' => TRUE,
	'#options' => !empty($form_state['values']['set_form_year']) ? get_terms_for_forms($form_state['values']['set_form_year']) : get_terms_for_forms($default_year),
	'#ajax' => array(
			 'callback' => 'get_aid_type_list',
			 'wrapper' => 'select-aid-type-list',
			 'method' => 'replace',
			 'effect' => 'fade'),
							);
  $form['term_select_field_set']['select_aid_type'] = array(
	'#type' => 'fieldset',
	'#weight' => -3,
	'#prefix' => '<div id="select-aid-type-list">',
	'#suffix' => '</div>',
							    );
  $form['term_select_field_set']['select_aid_type']['aid_type_select_list'] = array(
	'#type' => 'select',
	'#weight' => -4,
	'#title' => t('THIRD: Please Select the aid types from which to generate your form'),
	//'#multiple' => TRUE,
	'#required' => TRUE,
	'#options' => !empty($form_state['values']['set_form_year']) ? get_aid_types_for_form($form_state['values']['set_form_year'], $form_state['complete form']['#action']) : array('empty-list'),
	'#ajax' => array(
			 'callback' => 'create_student_choices',
			 'wrapper' => 'select-students-table',
			 'method' => 'replace',
			 'effect' => 'fade'),
											      );
    $form['term_select_field_set']['select_aid_type']['tuition_or_stipend'] = array(
        '#type' => 'radios',
	'#title' => t('FOURTH: Choose which Field, Tuition or Stipend, Students must have a value for to be in the list'),
	'#weight' => -2,
	'#options' => array(0 => t('Stipend > 0'), 1 => t('Tuition > 0')),
	'#default_value' => 0,
	'#description' => t('Please choose if the list of students should be populated with students with stipend > 0 (for TA/GA Appointment list or Payroll assignment form) or Tuition > 0 (for Tuition Award form)'),
	'#ajax' => array(
			 'callback' => 'create_student_choices',
			 'wrapper' => 'select-students-table',
			 'method' => 'replace',
			 'effect' => 'fade'),
							       );
  $form['term_select_field_set']['select_aid_type']['select_ta_ga_students'] = array(
	'#type' => 'actions',
	'#weight' => 0,
	'#prefix' => '<div id="select-students-table">',
	'#suffix' => '</div>',
					 );
  $form['term_select_field_set']['select_aid_type']['select_ta_ga_students']['choose_students_table'] = array(
	'#type' => 'tableselect',
	'#header' => !empty($form_state['values']['select_term']) ? $header : $blank_header,
	'#options' =>(!empty($form_state['values']['select_term']) && !empty($form_state['values']['aid_type_select_list'])) ? 
	get_students($form_state['values']['select_term'],$form_state['complete form']['#action'],$form_state['values']['aid_type_select_list'],$form_state['values']['tuition_or_stipend']) : $blank_table,
	'#weight' => 10,
								  );
  $form['term_select_field_set']['dev_notes'] = array(
        '#type' => 'markup',
	'#markup' => '',
	'#weight' => -10,
			     );
  /*FORM GENERATING BUTTONS!*/
  $form['form_building_buttons'] = array(
	'#title' => 'Form Generating buttons',
	'#type' => 'fieldset',
	'#weight' => -5,
					 );
  $form['form_building_buttons']['build_appointment_list'] = array(
        '#type' => 'submit',
	'#value' => 'Build TA/GA Appointment List',
	'#submit' => array('tuition_tool_forms_ta_ga_submit'),
	'#weight' => -5,
								   );
  $form['form_building_buttons']['generate_payroll_asignment_form'] = array(
        '#type' => 'submit',
	'#value' => 'Generate Payroll Asignment Forms',
	'#submit' => array('tuition_tool_forms_payroll_assignment'),
	'#weight' => -4,
								   );
  $form['form_building_buttons']['generate_tuition_award_form'] = array(
	'#type' => 'submit',
	'#value' => 'Generate Tuition Award Forms',
	'#submit' => array('tuition_tool_forms_tuition_award'),
	'#weight' => -3,
									);
								   
  //This space below here generates the form. 
  if(!empty($form_state['values']['choose_students_table'])){
    $students_selected = FALSE;//This variable and following for loop makes sure this doesn't activate unless students are selected
    foreach($form_state['values']['choose_students_table'] as $value){
      if($value > 0){
	$students_selected = TRUE;
	break;
      }
    }
    if($students_selected){    
      drupal_add_css(drupal_get_path('module','tuition_tool_forms').'/tuition_tool_forms.css');
      //removes the form stuff to only display the Appointment List
      unset($form['set_ta_ga_actions']);
      unset($form['term_select_field_set']);
      //unset($form['select_ta_ga_students']);
      //unset($form['build_appointment_list']);
      unset($form['form_building_buttons']);
      unset($form['dev_notes']);
      
      $student_list = array();
      
      $term_id = $form_state['values']['select_term'];
      
      foreach( $form_state['values']['choose_students_table'] as $stud_nid){
	if($stud_nid > 0){
	  $student_list[] = $stud_nid;
	}
      }
      $form['generated_appointment_list'] = array(
						  '#markup' => generate_appointment_html($student_list,$term_id,$form_state['complete form']['#action'],$form_state['values']['aid_type_select_list'])
						  );
    }
  }
  
  //return system_settings_form($form); this puts the save config button on the bottom.
  return $form;
}

function get_aid_type_list($form, &$form_state){
  return $form['term_select_field_set']['select_aid_type'];
}

function create_student_choices($form, $form_state){
  return $form['term_select_field_set']['select_aid_type']['select_ta_ga_students'];
}

function alter_term_choices($form,$form_state){
  return $form['term_select_field_set'];
}

//function get_position_num($account){
function get_position_num($account,$aid_nid){
  $load_aid_type = entity_load('node',array($aid_nid));
  //get the aid title for the wierd departments
  $aid_title = strtolower(trim($load_aid_type[$aid_nid]->title));
  switch ($account){
  case '211105': 
    $position = 'GT9960'; //Bio
    break;
  case '211310':
    $position = 'GT9950'; //Chem
    break;
  case '211125':
    $position = 'GT9940'; //EES
    break;
  case '211115':
    //English
    if($aid_title=='ta'){
      $position = 'GT9930';
    }
    elseif($aid_title=='senior ta'){
      $position = 'GT9940';
    }
    else{
      $position = '';
    }
    break;
  case '211135':
    $position = 'GT9910'; //History
    break;
  case '211145':
    //Math
    if($aid_title == 'grader' || $aid_title == 'graders'){
      $position = 'GT9890';
    }
    else{
      $position = 'GT9900';
    }
    break;
  case '211340':
    $position = 'GT9880';//Physics
    break;
  case '211130':
    $position = 'GT9870';//PoliSci
    break;
  case '211165':
    //Psych
    if($aid_title == 'ta'){
      $position = 'GT9850';
    }
    else{
      $position = 'GT9860';
    }
    break;
  case '211175':
    $position = 'GT9840'; //Socanthro
    break;
  case '211189':
    $position = 'GT9820'; //EI (EPD?)
    break;
  default:
    $position = '';
  }

      return $position;
}

function generate_appointment_html($stud_list,$term_id,$form_url,$aid_nid){
  $accntend = 61510;
  $dept = get_dept_title_from_url($form_url);
  $list_html = '';

  $term_load = entity_load('taxonomy_term',array($term_id));
  
  $term_ent_vals = array_values($term_load);
  $term_ent = $term_ent_vals[0];
  
  $term_code = $term_ent->field_banner_term_code['und'][0]['value'];

  $entities = entity_load('node',$stud_list);

  $total_stipend = 0;
  $total_rate = 0;
  $counter = 0;
  $table_html = '';
  
  //I NEED TO CHECK TO MAKE SURE THE ACCOUNT NUMBER IS THE SAME
  foreach($entities as $curentry){
    if($counter == 0){
      $account = $curentry->field_account_number['und'][0]['value']; //set the account number to make sure they are all the same
      //Position # from account #
      $position = get_position_num($account,$aid_nid);
    }
    else{
      $cur_account = $curentry->field_account_number['und'][0]['value'];
      if($cur_account != $account){
	return "<h1>Some of the enrties you've selected have different account numbers, they must ALL have the same account number for this form</h1>";
      }
    }

    //If I make these other fields required when entering stipend I don't need to be worried about there not being data in a field.
    $name = $curentry->field_student_last_name['und'][0]['value'].', '.$curentry->field_student_first_name['und'][0]['value'];
    $id =  $curentry->field_lin['und'][0]['value'];
    $phone =  $curentry->field_phone['und'][0]['value'];
    $stipend = $curentry->field_stipend['und'][0]['value'];
    //Values below here might not be required until I update the tuition tool code to make them
    //in case I make the date values required when entering stipend:
    //$start = $curentry->field_aid_date['und'][0]['value'];
    //$end = $curentry->field_aid_date['und'][0]['value2'];
    $start =  !empty($curentry->field_aid_date['und'][0]['value']) ? $curentry->field_aid_date['und'][0]['value'] : 0;
    $end = !empty($curentry->field_aid_date['und'][0]['value2']) ? $curentry->field_aid_date['und'][0]['value2'] : 0;
    $start_date = new DateTime($start);
    $end_date = new DateTime($end);

    $effort = !empty($curentry->field_effort['und'][0]['value']) ? $curentry->field_effort['und'][0]['value'] : '--';
    $periods = !empty($curentry->field_pay_periods['und'][0]['value']) ? $curentry->field_pay_periods['und'][0]['value'] : '--';
    $rate = !empty($curentry->field_pay_periods['und'][0]['value']) ? $stipend/$periods : 0;
    //if I make effort and periods required when entering stipend:
    //$effort = $curentry->field_effort['und'][0]['value'];
    //$periods = $curentry->field_pay_periods['und'][0]['value'];
    //$rate = $stipend/$periods;

    //Totals
    $total_stipend = $total_stipend + $stipend;
    $total_rate = $total_rate + $rate;
    //create the row
    $thisrow = '<tr><td>'.$name.'</td><td>'.$id.'</td><td>'.$phone.'</td><td>'.$start_date->format('m-d-Y').'</td><td>'
      .$end_date->format('m-d-Y').'</td><td>'.$effort.'</td><td>'.$periods.'</td><td>$'
      .number_format($rate,2,'.',',').'</td><td>$'.number_format($stipend,2,'.',',').'</td></tr>';

    //Add the row to the list
    $table_html = $table_html.$thisrow;
    $counter += 1;
  }

  $list_top_html = '<div class="appointment-list-page-wrapper">
                    <div class="appointment-list-inner-wrapper">
                    <div class="appointment-list-header">
                    <h1 class="appointment-list-head-text">TA/GA Appointment List</h1>
                    <div class="header-line-1 clearfix"><div class="term-space"><p>Term: <span class="term-id">'.$term_code.'</span></p></div>
                    <div class="account-space"><p>'.$account.'-'.$accntend.'</p></div></div>
                    <div class="header-line-2 clearfix"><div class="department-space"><p>Department:  <span class="department-name">'.$dept.'</span></p></div>
                    <div class="account-name"><p>Account</p></div></div></div>';

  $list_html = $list_html.$list_top_html;

  $table_header = '<table class="appointment-table"><tr class="table-header">
                           <th>Employee Name</th>
                           <th>Lehigh ID</th>
                           <th>Phone Ext.</th>
                           <th>Start Date</th>
                           <th>End Date</th>
                           <th>Percent Effort</th>
                           <th>Pay Periods</th>
                           <th>Periodic Rate</th>
                           <th>Total Stipend</th>                       
               </tr>';
  
  $list_html = $list_html.$table_header;
  $list_html = $list_html.$table_html;

  //Don't forget to style this final row differently
  $table_footer = '<tr class="last-row"><td></td><td></td><td></td><td></td><td></td><td></td>
                   <td class="final-totals"><strong>Totals:</strong></td><td class="final-totals"> $'.number_format($total_rate,2,'.',',')
                   .'</td><td class="final-totals"> $'.number_format($total_stipend,2,'.',',').'</td></tr></table>';

  $list_html = $list_html.$table_footer;

  $below_table = '<div class="sub-table">
                  <div class="sub-table-1 clearfix"><p>*Please use full legal name</p></div>
                  <div class="sub-table-2 clearfix"><p>For internal use only</p></div>
                  <div class="sub-table-3 clearfix"><p id="tkl">TKL</p><div class="internal-use-line"></div>
                                                    <div class="accnt-exec-line"><p>Account Executive</p></div>
                                                    <div class="date-line"><p>Date</p></div></div>
                  <div class="sub-table-4 clearfix"><p id="ddu">DDU</p><div class="internal-use-line"></div></div>
                  <div class="sub-table-5 clearfix"><p id="position-num">Position #</p><div class="internal-use-line"><p> '.$position.'</p></div></div>
                  <div class="sub-table-6 clearfix"><div class="no-status-change"><p>This form may not be used to report</p>
                                                                                  <p>change in existing status</p></div>
                                                    <div class="initials-table-div">
                                                    <table class="initials-table"><tr><th class="initials-initials">Initials</th>
                                                               <th class="initials-date">Date</th>
                                                               <th class="initials-rout">Routing</th></tr>
                                                    <tr><td></td><td></td><td>College Dean</td></tr>
                                                    <tr><td></td><td></td><td>Graduate Dean</td></tr>
                                                    <tr><td></td><td></td><td>Vice President</td></tr>
                                                    </table></div></div>
                 <div class="sub-table-last"><p>After obtaining signatures, return form to payroll office.</p></div></div>';

  $list_html = $list_html.$below_table;

  $list_html = $list_html.'</div></div>';


    return $list_html;
}

function tuition_tool_forms_ta_ga_submit($form, &$form_state){
  $form_state['rebuild'] = TRUE;
}

function tuition_tool_forms_payroll_assignment($form, &$form_state){
  $form_state['rebuild'] = FALSE;
  
  $department = get_dept_title_from_url($form_state['complete form']['#action']);

  $entities = entity_load('node',$form_state['values']['choose_students_table']);
  //get the aid type, but you only need to do it once.
  $aid_nid = $form_state['values']['aid_type_select_list'];
  $aid_ent = entity_load('node',array($aid_nid));
  $aid_type = $aid_ent[$aid_nid]->title;

  $lin_list = array();//the main data list.
  $error_list = array(); //a place to store errors

  foreach($entities as $nid => $curentry){
    $id =  $curentry->field_lin['und'][0]['value'];
    $account = $curentry->field_account_number['und'][0]['value'];
    $full_name = $curentry->field_student_last_name['und'][0]['value'].', '.$curentry->field_student_first_name['und'][0]['value'];
    //MAKE SURE the important fields are all filled in.
    if(empty($curentry->field_aid_date['und'][0]['value']) || empty($curentry->field_aid_date['und'][0]['value2']) || empty($curentry->field_pay_periods['und'][0]['value']) || empty($curentry->field_effort['und'][0]['value'])){
      drupal_set_message("Start Date, End Date, Pay Periods, and Effort ALL must be filled in for each entry. Skipping all entries for ".$full_name,'error');
      $error_list[$id] = 1;
      if(isset($lin_list[$id])){
	unset($lin_list[$id]);
      }
    }
    //check that effort is less than 50
    elseif($curentry->field_effort['und'][0]['value'] > 50){
      drupal_set_message('Effort can not be greater than %50. Error on <a href="/node/'.$nid.'>node/'.$nid.'</a>'.' Skipping all entries with LIN: '.$id,'error');
      $error_list[$id] = 1;
      if(isset($lin_list[$id])){
	unset($lin_list[$id]);
      }
    }
    else{															    
      $start_date = new DateTime($curentry->field_aid_date['und'][0]['value']);
      $end_date = new DateTime($curentry->field_aid_date['und'][0]['value2']);
      $periods = $curentry->field_pay_periods['und'][0]['value'];
      $effort = $curentry->field_effort['und'][0]['value'];
      
      if(isset($lin_list[$id]) && !(isset($error_list[$id]))){ //check if the LIN (id) is already in the list	
	
	//CHECK ALL START_DATE, END_DATE, EFFORT, PERIODS
	$first_nid = $lin_list[$id]['header']['first_nid'];
	//START DATE
	if($start_date != $lin_list[$id]['header']['start']){
	  drupal_set_message('Error: START DATE mismatch between <a href="/node/'.$nid.'">node/'.$nid.'</a> and <a href="/node/'.$first_nid.'">node/'.$first_nid.'</a>. '.$full_name.' will not be in the PDF. Change the start date(s) or print out the forms separately.','error');
	  unset($lin_list[$id]);
	  $error_list[$id] = 1;
	  continue;
	}
	//END DATE
	elseif($end_date != $lin_list[$id]['header']['end']){
	  drupal_set_message('Error: END DATE mismatch between <a href="/node/'.$nid.'">node/'.$nid.'</a> and <a href="/node/'.$first_nid.'">node/'.$first_nid.'</a>. '.$full_name.' will not be in the PDF. Change the end date(s) or print out the forms separately.','error');
	  unset($lin_list[$id]);
	  $error_list[$id] = 1;
	  continue;
	}
	//PAY PERIODS
	elseif($periods != $lin_list[$id]['header']['periods']){
	  drupal_set_message('Error: PAY PERIODS mismatch between <a href="/node/'.$nid.'">node/'.$nid.'</a> and <a href="/node/'.$first_nid.'">node/'.$first_nid.'</a>. '.$full_name.' will not be in the PDF. Change the Pay Periods or print out the forms separately.','error');
	  unset($lin_list[$id]);
	  $error_list[$id] = 1;
	  continue;
	}
	//EFFORT CHECK
	elseif($effort != $lin_list[$id]['header']['effort']){
	  drupal_set_message('Error: % EFFORT mismatch between <a href="/node/'.$nid.'">node/'.$nid.'</a> and <a href="/node/'.$first_nid.'">node/'.$first_nid.'</a>. '.$full_name.' will not be in the PDF. Change the %Effort or print out the forms separately.','error');
	  unset($lin_list[$id]);
	  $error_list[$id] = 1;
	  continue;
	}
	//ACCOUNT NUMBER COLLISION CHECK
	elseif(isset($lin_list[$id]['accounts'][$account])){
	  drupal_set_message('ERROR: Account number '.$account.' is already in the list for '.$full_name.'. It cannot be in more than once. Check <a href="/node/'.$nid.'">node/'.$nid.'</a> to change this.','error');
	  unset($lin_list[$id]);
	  $error_list[$id] = 1;
	  continue;
	}
	//ACCOUNT NUMBER LIMIT CHECK
	elseif(count($lin_list[$id]['accounts']) == 5){
	    //There are already 5 in the list and they are trying to add another. Throw an error
	    drupal_set_message('Error: MORE THAN 5 ACCOUNTS. 2 offending nodes: <a href="/node/'.$nid.'">node/'.$nid.'</a> and <a href="/node/'.$first_nid.'">node/'.$first_nid.'</a>. '.$full_name.' will not be in the PDF. Remove some stipend/account entries or print out the forms separately.','error');
	    unset($lin_list[$id]);
	    $error_list[$id] = 1;
	    continue;
	}
	else{
	  //Add the account and stipend to the list
	  $lin_list[$id]['accounts'][$account] = $curentry->field_stipend['und'][0]['value'];
	  $lin_list[$id]['header']['total'] += $curentry->field_stipend['und'][0]['value']; //increase the value for the total
	}
      }
      else{	//create a new entry in the list of lins since it's not in the error list or not already in the list
	$lin_list[$id] = array();

	//create the header info array
	$lin_list[$id]['header'] = array(
					 'last' => $curentry->field_student_last_name['und'][0]['value'],
					 'first' => $curentry->field_student_first_name['und'][0]['value'],
					 'dept' => $department,
					 'location' => $curentry->field_check_location['und'][0]['value'],
					 'contact' => !empty($curentry->field_contact['und'][0]['value']) ? $curentry->field_contact['und'][0]['value'] : '',
					 'phone' => $curentry->field_phone['und'][0]['value'],
					 'aid_type' => $aid_type,
					 'periods' => $periods,
					 'effort' => $effort,
					 'start' => $start_date,
					 'end' => $end_date,
					 'total' => $curentry->field_stipend['und'][0]['value'],
					 'first_nid' => $nid,
					 );
	//create the accounts part of the list
	$lin_list[$id]['accounts'] = array();
	$lin_list[$id]['accounts'][$account] = $curentry->field_stipend['und'][0]['value'];
    }
    //array of information completed
      } 
  }     

  $pdf_list = array();

  foreach($lin_list as $lin => $form_values){
    $pdf_list[] = generate_payroll_single_pdf($lin,$form_values['header'],$form_values['accounts']);
  }
  
  $final_pdf = drupal_get_path('module','tuition_tool_forms').'/../../files/tuition-tool-forms/'.str_replace(" ","",$department).'_'.str_replace(" ","",$aid_type).'-'.date("YmdGis").'.pdf';

  present_filled_pdf($final_pdf,$pdf_list);

  //maybe delete the filled pdf, or just send a success or error message here at the end.

}

function generate_payroll_single_pdf($lin,$head,$accnts){
  //don't forget to convert the DateTime objects to readable format.
  //FIRST construct the header info before iteration through the account numbers
  
  $fdf_data = '<</T(Last Name)/V('.$head['last'].')>>'.
              '<</T(First Name)/V('.$head['first'].')>>'.
              '<</T(Department where Payroll records are kept)/V('.$head['dept'].')>>'.
              '<</T(LIN/ID Number)/V('.$lin.')>>'.
              '<</T(Check Dist Location)/V('.$head['location'].')>>'.
              '<</T(Department Contact Person)/V('.$head['contact'].')>>'.
              '<</T(Ext)/V('.$head['phone'].')>>'.
              '<</T(Position Title)/V('.$head['aid_type'].')>>'.
              '<</T(Salary Per Pay)/V($'.number_format($head['total']/$head['periods'],2,'.',',').')>>'.
              '<</T(Pay ID)/V('.$head['periods'].')>>'.
              '<</T(FTE)/V('.$head['effort'].'%)>>'.
    '<</T(Annual Salary)/V($'.number_format($head['total'],2,'.',',').')>>';
  //Now fill in the rest of the data with a foreach loop
  $start = $head['start']->format('m-d-Y');
  $end = $head['end']->format('m-d-Y');
  $count = 1;
  foreach($accnts as $account => $stipend){
    $i = strval($count);
    $fdf_data .= '<</T(Index '.$i.')/V('.$account.')>>'.
                 '<</T(Index Distribution '.$i.')/V('.number_format(100*($stipend/$head['total']),2,'.',',').'%)>>'.
                 '<</T(Start Date '.$i.')/V('.$start.')>>'.
                 '<</T(End Date '.$i.')/V('.$end.')>>'.
      '<</T(Dollars '.$i.')/V($'.number_format($stipend,2,'.',',').')>>';

    $count += 1;
  }
  
  //$input_form = '/etc/drupal7/tuitool-dev.cas2.lehigh.edu/modules/tuition_tool_forms/fillable_forms/Payroll_Assignment.pdf';
  $input_form = drupal_get_path('module','tuition_tool_forms').'/fillable_forms/Payroll_Assignment.pdf';
  //$output_path = '/etc/drupal7/tuitool-dev.cas2.lehigh.edu/files/tuition-tool-forms/';
  $output_path = drupal_get_path('module','tuition_tool_forms').'/../../files/tuition-tool-forms/';
  //time to add to filename so it is unique
  $now = date("YmdGis");
  //sanatize first and last names of non-alpha-numeric characters since it's being saved as a file.
  $san_last = preg_replace("/[^A-Za-z0-9]/",'',$head['last']);
  $san_first = preg_replace("/[^A-Za-z0-9]/",'',$head['first']);
  //additionall add aid type, with white spaces stipped out:
  //$strip_aid = preg_replace(' ','',$head['aid_type']);
  $outpdf = $output_path.$san_last.'_'.$san_first.'-'.$now.'.pdf';
  $temp_fdf = gen_temp_fdf($fdf_data);

  exec("pdftk ".$input_form." fill_form ".$temp_fdf." output ".$outpdf." flatten");

  unlink($temp_fdf);

  //I should really put a check in here to make sure that this file exists, maybe even do a loop once or twice with the temp file to try to generate the file again.
  return $outpdf;
}

function gen_temp_fdf($data){

  $fdf_head = '%FDF-1.2
1 0 obj<</FDF << /Fields [';

  $fdf_foot =  "] >> >>
endobj
trailer
<</Root 1 0 R>>
%%EOF";
 
  $rand_pre = strval(rand(1,1000)); //a random prefix for the file so that we don't have any file collision

  $content = $fdf_head.$data.$fdf_foot;
  
  $temp_name = tempnam('/tmp',$rand_pre);
  $temp_file = fopen($temp_name, 'w');
  fwrite($temp_file,$content);
  fclose($temp_file);
  return $temp_name;
}

function tuition_tool_forms_tuition_award($form, &$form_state){
}

function generate_tuition_single_pdf($pdf_info){
}

function present_filled_pdf($file_name,$pdf_list){
  //I can use this to present both types of pdf's

  $command = "pdftk ";

  foreach($pdf_list as $pdf){
    $command .= $pdf." ";    
  }

  $command .= "cat output ".$file_name;
  
  exec($command);
  
  if(file_exists($file_name)){
    
    $just_name = end(explode('/',$file_name));

    drupal_set_message("File ".$just_name." Successfully Generated! Downloading..",'status');
    
    header('Content-Description: File Transfer');
    header('Content-Type: application/octet-stream');
    header('Content-Disposition: attachment; filename=' .$just_name);
    header('Expires: 0');
    header('Cache-Control: must-revalidate');
    header('Pragma: public');
    header('Content-Length: ' . filesize($file_name));

    readfile($file_name);            

    exit();
    
  }
  else{
    drupal_set_message("Error generating file",'error');
  }

  
}
